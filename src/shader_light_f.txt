#version 330 core


in vec3 myColor;
in vec3 FragNormal;
in vec3 FragPos;

out vec4 FragColor;

uniform vec3 LightPos;
uniform vec3 CameraPos;

void main()
{
	vec3 norm = normalize(FragNormal);

	// 使用normalize进行归一化操作得到单位向量，进行点乘得到夹角的余弦值

	// 环境光照，用光的颜色乘以一个很小的常量环境因子(强度)
	float ambientStrength = 0.1;					// 强度
	vec3 ambient = vec3(ambientStrength) * myColor;		// 强度*颜色

	// 漫反射光照
	vec3 diffuseLight = normalize(LightPos - FragPos);
	float diffuseStrength = 0.8 * max(dot(FragNormal, diffuseLight), 0.0);
	vec3 diffuse = vec3(diffuseStrength) * myColor;

	// 镜面反射光照（亮点）
	// reflect函数第一个参数是入射光的方向
	vec3 reflectLight = reflect(-diffuseLight, FragNormal);
	// 镜面强度变量，给镜面高光一个中等亮度颜色，让它不要产生过度的影响。
	float specularStrength = 0.8;
	// 观察视角方向向量
	vec3 CameraDir = normalize(CameraPos - FragPos);
	// 计算镜面分量,取32 次幂， 32 是镜面反射光的反光度（一个物体的反光度越高，反射光的能力越强，散射得越少，高光点就会越小。）
	vec3 specular = vec3(specularStrength) * pow(max(dot(vec3(CameraDir), reflectLight), 0.0), 32) * myColor;

	FragColor = vec4(ambient + diffuse + specular, 1.0f);
}
