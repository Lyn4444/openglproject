// 着色器这是一种把输入转化为输出的程序，彼此之间不进行通信，唯一的沟通是通过输入输出
// 着色器使用GLSL的类C语言，GLSL包含一些针对向量和矩阵操作的有用特性
// 着色器要依次声明版本，输入输出变量，uniform和mian函数

// 着色器典型模板
//#version version_number
//
//in vector_type in_variable_name;
//out vector_type out_variable_name;
//
//uniform type uniform_name;
//
//void main()
//{
//  // 处理输入并进行一些图形操作
//  ...
//  // 将处理过的结果送到输出变量
//  out_variable_name = 处理过的结果;
//}

// GLSL 中的向量是一个可以包含有1，2，3或者4个分量的容器
// 分量的类型可以是前面默认基础类型的任意一个，也可以是下面的形式（n代表分量的数量）
// vec+n	包含n个float分量的向量（多数时候使用）
// bvec+n	包含n个bool分量的向量
// ivec+n	包含n个int分量的向量
// uvec+n	包含n个unsigned int分量的向量
// dvec+n	包含n个double分量的向量
// 
// 向量的分量获取方式
// 一个向量的分量可以通过 vec.x 这种方式获取，这里 x 是指这个向量的第一个分量,可以分别使用 “ .x、.y、.z 和 .w ” 来获取它们的第 1、2、3、4 个分量。
// GLSL 也允许你对颜色使用 rgba ，或是对纹理坐标使用 stpq 访问相同的分量。

// 一.顶点/片段着色器（txt）
// 顶点着色器与片段着色器的联系：
// 1）通过顶点着色器在输入端获取颜色作为顶点属性，再传到片段着色器进行处理输出
// 2）着色器是各自独立，但是都是一个整体，GLSL定义in和out使得着色器使用这个关键字设定输入输出，同时一个输出变量与下一个着色器的输入匹配就会传递下出
// 3）顶点着色器接受一种特殊形式的输入，从顶点数据中直接接受输入。使用location指定输入变量定义顶点数据如何管理,书写格式：
//    layout(location = 0)。顶点着色器需要为其输入提供一个额外的layout标识，才能连接到顶点数据


// 二.创建着色器类（Shader.h)
// 创建一个着色器类使得每个独立的着色器有机地联合

